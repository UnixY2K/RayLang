let cmath = @import("cstd:math.ray");
let cstdio = @import("cstd:io.ray");
let cstdlib = @import("cstd:std.ray");
let cstring = @import("cstd:string.ray");

fn print(buffer: [u8;]){
	cstdio.fwrite(buffer as mut c_voidptr, @sizeOf(c_char), cstring.strlen(buffer as c_char*), cstdio.get_stdout());
}

fn s32toString(num: s32) -> [mut u8;]{
	let floorResult: usize = cmath.floor(log10(num));
	let mut size: usize = floorResult + 1;
	let mut n: s32 = num;
	let array: [mut u8;] = cstdlib.malloc(size + 1) as [mut u8;];
	let mut i: usize = (size - 1);
	array[size] = '\0';
	while n != 0 {
		array[i--] = (n % 10) + '0';
		n /= 10;
	}
	return array;
}


fn fib(n: s32) -> s32{
	if(n <= 2){
		return 1;
	}
	return fib(n-1) + fib(n-2);
}


#[Linkage(mangling="c", resolution="external")]
pub fn main(argc: s32, argv: c_char**) -> mut s32 {
	if(argc != 2){
		print("usage: ");
		print(argv[0] as [u8;]);
		print(" number\n");
		return -1;
	}
	let result: s32 = fib(cstdlib.atoi(argv[1]));
	let resultStr = s32toString((result));
	print(resultStr);
	free(resultStr as [mut u8;]);
	print("\n");
	return 0;
}


