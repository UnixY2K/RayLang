// requires to link with c math and stdlib

extern "C"{
struct FILE;
let extern stdout: FILE*;
pub fn atoi(buffer: [c_char;]) -> mut c_int;
pub fn fwrite(buffer: c_voidptr, size: mut c_size, count: mut c_size, stream: mut FILE*) -> mut c_size;
pub fn strlen(buffer: [c_char;]) -> mut c_size;
pub fn floor(number: mut f64) -> mut f64;
pub fn log10(number: mut f64) -> mut f64;
pub fn malloc(size: c_size) -> mut c_voidptr;
pub fn free(size: mut c_voidptr);
}

fn print(buffer: [u8;]){
	fwrite(buffer as c_voidptr, sizeof(c_char), strlen(buffer as c_char*), stdout);
}

fn s32toString(num: s32) -> mut [u8;]{
	let size: usize = floor(log10(num)) + 1;
	let mut n: s32 = num;
	let mut array: [u8;] = malloc(size + 1) as mut [u8;];
	let i: usize = (size - 1);
	while n != 0 {
		array[i--] = (n % 10) + '0';
		n /= 10;
	}
	return array;
}


fn fib(n: s32) -> s32{
	if(n <= 2){
		return 1;
	}
	return fib(n-1) + fib(n-2);
}


pub fn main(argc: s32, argv: c_char**) -> mut s32 {
	if(argc != 2){
		print("usage: ");
		print(argv[0] as [u8;]);
		print(" number\n");
		return -1;
	}

	let result: s32 = fib(atoi(argv[1]));
	let resultStr: [u8;] = s32toString((result));
	print(resultStr);
	free(resultStr);
	print("\n");
	return 0;
}
